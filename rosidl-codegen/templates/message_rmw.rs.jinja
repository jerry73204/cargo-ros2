// RMW (ROS Middleware) layer - C-compatible FFI types
// Package: {{ package_name }}
// Message: {{ message_name }}

use serde::{Deserialize, Serialize};

{% for constant in constants %}
pub const {{ constant.name }}: {{ constant.rust_type }} = {{ constant.value }};
{% endfor %}

#[repr(C)]
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct {{ message_name }} {
    {% for field in fields %}
    pub {{ field.name }}: {{ field.rust_type }},
    {% endfor %}
}

impl {{ message_name }} {
    pub fn new() -> Self {
        Self::default()
    }
}

impl Default for {{ message_name }} {
    fn default() -> Self {
        Self {
            {% for field in fields %}
            {{ field.name }}: Default::default(),
            {% endfor %}
        }
    }
}

// FFI type support descriptor (placeholder for future C integration)
extern "C" {
    // fn rosidl_typesupport_c__get_message_type_support_handle__{{ package_name }}__msg__{{ message_name }}() -> *const std::ffi::c_void;
}
